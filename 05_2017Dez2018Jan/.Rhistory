data <- xmlParse(url, isURL=TRUE, asTree = TRUE, useInternalNodes = TRUE)
xml_data <- xmlToList(data)
for(i in 1:length(xml_data)){
df <- data.frame(
id=as.numeric(xml_data[[i]]$id),
nome=xml_data[[i]]$nome,
tipoProposicao=xml_data[[i]]$tipoProposicao$sigla,
numero=as.numeric(xml_data[[i]]$numero),
ano=xml_data[[i]]$ano,
orgaoNumerador=xml_data[[i]]$orgaoNumerador$nome,
datApresentacao=xml_data[[i]]$datApresentacao,
txtEmenta=xml_data[[i]]$txtEmenta,
txtExplicacaoEmenta=xml_data[[i]]$txtExplicacaoEmenta,
txtRegime=xml_data[[i]]$regime$txtRegime,
txtApreciacao=xml_data[[i]]$apreciacao$txtApreciacao,
qtdAutores=xml_data[[i]]$qtdAutores,
autor1=xml_data[[i]]$autor1$txtNomeAutor,
ultimoDespacho=xml_data[[i]]$ultimoDespacho$txtDespacho,
situacao=xml_data[[i]]$situacao$descricao,
proposicaoPrincipal=xml_data[[i]]$proposicao$nome
)
baseProjetos <- rbind(baseProjetos, df)
}
}
}
url
i
xml_data[[i]]$id
xml_data[[i]]$descricao
xml_data[[i]]$erro$descricao
xml_data
xml_data[[1]]$descricao
xml_data$descricao
str(xml_data)
d <- xml_data
d
names(d)
names(d)[1]
names(d)[1] == 'descricao'
library(XML)
# tipo proposicoes
TIPOLEI <- c(
'MPV', 'MSC', 'MSF', 'MSG', 'OF.', 'P.C', 'PDC', 'PDF',
'PDL', 'PDN', 'PDR', 'PDS', 'PEC', 'PL.', 'PLD', 'PLN',
'PLP', 'PRC', 'PRN', 'QOD', 'RCP', 'REC', 'REP', 'REQ',
'VET'
)
baseProjetos <- NULL
for(ano in 1989:2017){
for(tipo in TIPOLEI){
url <-  paste0("http://www.camara.leg.br/SitCamaraWS/Proposicoes.asmx/ListarProposicoes?",
"sigla=",tipo,"&numero=&ano=",ano,
"&datApresentacaoIni=&datApresentacaoFim=&idTipoAutor=&parteNomeAutor=",
"&siglaPartidoAutor=&siglaUFAutor=&generoAutor=&codEstado=&codOrgaoEstado=&emTramitacao=")
data <- xmlParse(url, isURL=TRUE, asTree = TRUE, useInternalNodes = TRUE)
xml_data <- xmlToList(data)
if(names(xml_data)[1] != 'descricao'){
for(i in 1:length(xml_data)){
df <- data.frame(
id=as.numeric(xml_data[[i]]$id),
nome=xml_data[[i]]$nome,
tipoProposicao=xml_data[[i]]$tipoProposicao$sigla,
numero=as.numeric(xml_data[[i]]$numero),
ano=xml_data[[i]]$ano,
orgaoNumerador=xml_data[[i]]$orgaoNumerador$nome,
datApresentacao=xml_data[[i]]$datApresentacao,
txtEmenta=xml_data[[i]]$txtEmenta,
txtExplicacaoEmenta=xml_data[[i]]$txtExplicacaoEmenta,
txtRegime=xml_data[[i]]$regime$txtRegime,
txtApreciacao=xml_data[[i]]$apreciacao$txtApreciacao,
qtdAutores=xml_data[[i]]$qtdAutores,
autor1=xml_data[[i]]$autor1$txtNomeAutor,
ultimoDespacho=xml_data[[i]]$ultimoDespacho$txtDespacho,
situacao=xml_data[[i]]$situacao$descricao,
proposicaoPrincipal=xml_data[[i]]$proposicao$nome
)
baseProjetos <- rbind(baseProjetos, df)
}
}
}
}
xml_data[[i]]$nome
xml_data[[i]]$id
as.numeric(xml_data[[i]]$id)
xml_data[[i]]$nome
xml_data[[i]]$tipoProposicao$sigla
as.numeric(xml_data[[i]]$numero)
xml_data[[i]]$ano
xml_data[[i]]$orgaoNumerador$nome
xml_data[[i]]$datApresentacao
xml_data[[i]]$txtEmenta
xml_data[[i]]$txtExplicacaoEmenta
xml_data[[i]]$regime$txtRegime
xml_data[[i]]$apreciacao$txtApreciacao
xml_data[[i]]$qtdAutores
xml_data[[i]]$autor1$txtNomeAutor
xml_data[[i]]$ultimoDespacho$txtDespacho
xml_data[[i]]$situacao$descricao
xml_data[[i]]$proposicao$nome
xml_data[[i]]$situacao$principal$proposicaoPrincipal
xml_data[[i]]$situacao$orgao$siglaOrgaoEstado
xml_data[[i]]$situacao$principal$proposicaoPrincipal
xml_data[[i]]$situacao$descricao
# tipo proposicoes
TIPOLEI <- c(
'MPV', 'MSC', 'MSF', 'MSG', 'OF.', 'P.C', 'PDC', 'PDF',
'PDL', 'PDN', 'PDR', 'PDS', 'PEC', 'PL.', 'PLD', 'PLN',
'PLP', 'PRC', 'PRN', 'QOD', 'RCP', 'REC', 'REP', 'REQ',
'VET'
)
baseProjetos <- NULL
for(ano in 1989:2017){
for(tipo in TIPOLEI){
url <-  paste0("http://www.camara.leg.br/SitCamaraWS/Proposicoes.asmx/ListarProposicoes?",
"sigla=",tipo,"&numero=&ano=",ano,
"&datApresentacaoIni=&datApresentacaoFim=&idTipoAutor=&parteNomeAutor=",
"&siglaPartidoAutor=&siglaUFAutor=&generoAutor=&codEstado=&codOrgaoEstado=&emTramitacao=")
data <- xmlParse(url, isURL=TRUE, asTree = TRUE, useInternalNodes = TRUE)
xml_data <- xmlToList(data)
if(names(xml_data)[1] != 'descricao'){
for(i in 1:length(xml_data)){
df <- data.frame(
id=as.numeric(xml_data[[i]]$id),
nome=xml_data[[i]]$nome,
tipoProposicao=xml_data[[i]]$tipoProposicao$sigla,
numero=as.numeric(xml_data[[i]]$numero),
ano=xml_data[[i]]$ano,
orgaoNumerador=xml_data[[i]]$orgaoNumerador$nome,
datApresentacao=xml_data[[i]]$datApresentacao,
txtEmenta=xml_data[[i]]$txtEmenta,
txtExplicacaoEmenta=xml_data[[i]]$txtExplicacaoEmenta,
txtRegime=xml_data[[i]]$regime$txtRegime,
txtApreciacao=xml_data[[i]]$apreciacao$txtApreciacao,
qtdAutores=xml_data[[i]]$qtdAutores,
autor1=xml_data[[i]]$autor1$txtNomeAutor,
ultimoDespacho=xml_data[[i]]$ultimoDespacho$txtDespacho,
situacao=xml_data[[i]]$situacao$descricao,
situacaoOrgao=xml_data[[i]]$situacao$orgao$siglaOrgaoEstado,
situacaoProposicaoPrincipal=xml_data[[i]]$situacao$principal$proposicaoPrincipal
)
baseProjetos <- rbind(baseProjetos, df)
}
}
}
}
3+2
3:4
a <- 9
library(RCurl)
library(RCurl)
library(XML)
l <- readHTMLList("http://lattes.cnpq.br/9394532830433721")
url <- "http://buscatextual.cnpq.br/buscatextual/visualizacv.do?id=K4771292E6"
l <- readHTMLList(url)
url <- "http://buscatextual.cnpq.br/buscatextual/download.do?metodo=apresentar&idcnpq=9394532830433721"
l <- readHTMLList(url)
airquality
fit <- lm(Ozone ~Wind, data = airquality)
fit
fit$coefficients[1] + fit$coefficients[2]*c(1.5, 3.7, 10, 15.3, 22)
99.041277 + -5.728797*c(1.5, 3.7, 10, 15.3, 22)
99.041277 + -5.728797*c(5, 3.7, 10, 15.3, 22)
aq <- airquality
View(aq)
is.na(aq$Wind)
sum(is.na(aq$Wind))
y <- airquality$Ozone[!is.na(airquality$Ozone)]
x <- airquality$Wind[!is.na(airquality$Ozone)]
mu <- beta0 + beta1 * x
e <- y - mu
VRR <- sum ((y - mean(y))^2)
VRE <- sum ((y-mu)^2)
VT <- VRR + VRE
R2 <- VRR / VT
R2
!is.na(airquality$Ozone)
y <- airquality$Ozone[!is.na(airquality$Ozone)]
x <- airquality$Wind[!is.na(airquality$Ozone)]
fit <- lm(formula = Ozone ~ Wind, data = airquality)
beta0 <- coef(fit)[1]
beta1 <- coef(fit)[2]
y <- airquality$Ozone[!is.na(airquality$Ozone)]
x <- airquality$Wind[!is.na(airquality$Ozone)]
mu <- beta0 + beta1 * x
e <- y - mu
VRR <- sum ((y - mean(y))^2)
VRE <- sum ((y-mu)^2)
VT <- VRR + VRE
R2 <- VRR / VT
R2
beta0
is.na(airquality$Ozone)
sum(is.na(airquality$Ozone))
cor(y, x) * sd(y) / sd(x)
bet1
beta1
summary(fit)
VRR <- sum((mu - mean(y))^2) # Equação 6.23
VRE <- sum((y - mu)^2) # Equação 6.22
VT <- VRR + VRE # Equação 6.24
R2 <- VRR / VT # Equação 6.25
knitr::opts_chunk$set(echo = TRUE)
eleicoes2014 <- read.csv2('Eleicoes2014.csv')
View(eleicoes2014)
knitr::opts_chunk$set(echo = TRUE)
## Identificando base cars do próprio R
cars <- datasets::cars
y <- cars$dist # Variavel Independente
x <- cars$speed # Variavel Dependente
## Regressão Linear
fit <- lm(dist~speed, data = cars) #fit é o modelo
## Coeficientes de Regressão
coeficiente <- fit$coefficients
beta0 <- coeficiente[1]
beta1 <- coeficiente[2]
beta0
beta1
summary(fit) # Todos os valores que o R calcula
# dist = -17.5791 + 3.9324 * speed ou y = a + bx
## Gráfico de dispersão e Reta de Regressão
plot(cars$speed, cars$dist, xlab ="VELOCIDADE", ylab = "DISTâNCIA", main = "Gráfico de Dispersão")
abline(fit)
## Histograma de Resíduos
hist(fit$residuals, main = "Histograma de Resíduos", xlab = "Resíduos", ylab = "Frequência", col =rainbow(8))
## Gráfico de resíduos vs valor preditor
plot(cars$speed, fit$residuals) #Gráfico
## valores esperados para cada valor de x
#5
speed5 <- beta0 + beta1*5
speed5
#10
speed10 <- beta0 + beta1*10
speed10
#14
speed14 <- beta0 + beta1*14
speed14
#23
speed23 <- beta0 + beta1*23
speed23
#30
speed30 <- beta0 + beta1*30
speed30
## Verificar o valor de R2
summary(fit)
summary(fit)$r.squared
##Identificando
airquality <- datasets::airquality
airquality2 <- airquality[which(!is.na(airquality$Ozone)),]
airquality3 <- airquality2[which(!is.na(airquality2$Solar.R)),]
## Regressão Linear
fit2 <- lm(Ozone ~ Solar.R, data = airquality3) # Se fosse com mais variaveis explicativas, seria x1+x2+...
length(fit2$residuals)
x11()
## Os coeficientes de Regressão
# Pela fórmula
coeficiente <- fit2$coefficients
beta0 <- coeficiente[1]
beta1 <- coeficiente[2]
beta0
beta1
## Gráfico de dispersão e Reta de Regressão
plot(airquality3$Solar.R, airquality3$Ozone, xlab = "Radiacao Solar", ylab = "Ozonio")
abline(fit2)
## Histograma de Resíduos
hist(fit2$residuals, xlab = "Residuos", ylab = "Frequencia", col = rainbow (9))
## Gráfico de resíduos vs valor preditor
plot(airquality3$Solar.R, fit2$residuals) #grafico
## valores esperados para cada valor de x
#10
solar10 <- beta0 + beta1*10
solar10
#100
solar100 <- beta0 + beta1*100
solar100
#200
solar200 <- beta0 + beta1*200
solar200
#300
solar300 <- beta0 + beta1*300
solar300
## Verificar o valor de R2
summary(fit2)
summary(fit2)$r.squared
#Regressão Linear
fit3 <- lm(Ozone ~ Wind, data = airquality3)
## coeficientes de Regressão
coeficiente <- fit3$coefficients
beta0 <- coeficiente[1]
beta1 <- coeficiente[2]
beta0
beta1
## Determinando os valores esperados para cada valor de x
#1.5
vento1.5 <- beta0 + beta1*1.5
vento1.5
#3.7
vento3.7 <- beta0 + beta1*3.7
vento3.7
#10
vento10 <- beta0 + beta1*10
vento10
#15.3
vento15.3 <- beta0 + beta1*15.3
vento15.3
#22
vento22 <- beta0 + beta1*22
vento22
eleicoes2014 <- read.csv2('Eleicoes2014.csv')
fit4 <- lm(Nominais ~ Receitas.em.2014, data = eleicoes2014)
summary(fit4)
## Regressão Linear
fit4 <- lm(Nominais ~ Receitas.em.2014, data = eleicoes2014)
summary(fit4)
## Os coeficientes de Regressão
# Pela fórmula
coeficiente <- fit4$coefficients
beta0 <- coeficiente[1]
beta1 <- coeficiente[2]
beta0
beta1
## Gráfico de dispersão e Reta de Regressão
plot(eleicoes2014$Receitas.em.2014, eleicoes2014$Nominais, xlab = "Receita", ylab = "Votos")
abline(fit4)
## Histograma de Resíduos
hist(fit4$residuals, xlab = "Residuos", ylab = "Frequencia", col = rainbow (9))
## Gráfico de resíduos vs valor preditor
#plot(eleicoes2014$Receitas.em.2014, fit4$residuals) #grafico
lmIC <- function(x, Y, vx=NULL, nc=.95){
n <- length(x)
tc <- nc + (1-nc)/2 # tc = t crítico
plot(x, Y , frame=FALSE, pch=21, col="black", bg="lightblue", cex=2)
fit <- lm(Y ~ x)
abline(fit, lwd=2)
beta0 <- coef(fit)[1]
beta1 <- coef(fit)[2]
xVals <- seq(min(x,na.rm=TRUE),
max(x,na.rm=TRUE),
by=(max(x,na.rm=TRUE)-min(x,na.rm=TRUE))/200)
yVals <- beta0 + beta1 * xVals
sigma <- sqrt(sum(fit$residuals^2) / (n-2))
ssx <- sum((x - mean(x))^2)
se1 <- sigma * sqrt(1 / n + (xVals - mean(x))^2 / ssx)
se2 <- sigma * sqrt(1 + 1 / n + (xVals - mean(x))^2 / ssx)
lines(xVals, yVals + qt(tc,n-2) * se1, col="red")
lines(xVals, yVals - qt(tc,n-2) * se1, col="red")
lines(xVals, yVals + qt(tc,n-2) * se2, col="blue")
lines(xVals, yVals - qt(tc,n-2) * se2, col="blue")
if( !is.null(vx) ){
ret <- NULL
yVals <- beta0 + beta1 * vx
se2 <- sigma * sqrt(1 + 1 / n + (vx - mean(x))^2 / ssx)
for(i in 1:length(vx)){
ret <- c(ret, yVals[i],
yVals[i] - qt(tc,n-2) * se2[i],
yVals[i] + qt(tc,n-2) * se2[i])
}
return(matrix(ret, ncol=3, byrow = TRUE,
dimnames=list(c(),c("esperado","Icmin","ICmax"))))
}
}
lmIC(cars$speed, cars$dist)
lmIC(airquality3$Solar.R, airquality3$Ozone)
lmIC(airquality3$Wind, airquality3$Ozone)
lmIC <- function(x, Y, vx=NULL, nc=.95){
n <- length(x)
tc <- nc + (1-nc)/2 # tc = t crítico
plot(x, Y , frame=FALSE, pch=21, col="black", bg="lightblue", cex=2)
fit <- lm(Y ~ x)
abline(fit, lwd=2)
beta0 <- coef(fit)[1]
beta1 <- coef(fit)[2]
xVals <- seq(min(x,na.rm=TRUE),
max(x,na.rm=TRUE),
by=(max(x,na.rm=TRUE)-min(x,na.rm=TRUE))/200)
yVals <- beta0 + beta1 * xVals
sigma <- sqrt(sum(fit$residuals^2) / (n-2))
ssx <- sum((x - mean(x))^2)
se1 <- sigma * sqrt(1 / n + (xVals - mean(x))^2 / ssx)
se2 <- sigma * sqrt(1 + 1 / n + (xVals - mean(x))^2 / ssx)
lines(xVals, yVals + qt(tc,n-2) * se1, col="red")
lines(xVals, yVals - qt(tc,n-2) * se1, col="red")
lines(xVals, yVals + qt(tc,n-2) * se2, col="blue")
lines(xVals, yVals - qt(tc,n-2) * se2, col="blue")
if( !is.null(vx) ){
ret <- NULL
yVals <- beta0 + beta1 * vx
se2 <- sigma * sqrt(1 + 1 / n + (vx - mean(x))^2 / ssx)
for(i in 1:length(vx)){
ret <- c(ret, yVals[i],
yVals[i] - qt(tc,n-2) * se2[i],
yVals[i] + qt(tc,n-2) * se2[i])
}
return(matrix(ret, ncol=3, byrow = TRUE,
dimnames=list(c(),c("esperado","Icmin","ICmax"))))
}
}
## Exercício 1
lmIC(cars$speed, cars$dist)
## Exercíco 2
lmIC(airquality3$Solar.R, airquality3$Ozone)
lmIC(airquality3$Wind, airquality3$Ozone)
### Exercício 3
lmIC(eleicoes2014$Receitas.em.2014, eleicoes2014$Receitas)
eleicoes2014 <- read.csv2('Eleicoes2014.csv')
lmIC(eleicoes2014$Receitas.em.2014, eleicoes2014$Receitas)
lmIC <- function(x, Y, vx=NULL, nc=.95){
n <- length(x)
tc <- nc + (1-nc)/2 # tc = t crítico
plot(x, Y , frame=FALSE, pch=21, col="black", bg="lightblue", cex=2)
fit <- lm(Y ~ x)
abline(fit, lwd=2)
beta0 <- coef(fit)[1]
beta1 <- coef(fit)[2]
xVals <- seq(min(x,na.rm=TRUE),
max(x,na.rm=TRUE),
by=(max(x,na.rm=TRUE)-min(x,na.rm=TRUE))/200)
yVals <- beta0 + beta1 * xVals
sigma <- sqrt(sum(fit$residuals^2) / (n-2))
ssx <- sum((x - mean(x))^2)
se1 <- sigma * sqrt(1 / n + (xVals - mean(x))^2 / ssx)
se2 <- sigma * sqrt(1 + 1 / n + (xVals - mean(x))^2 / ssx)
lines(xVals, yVals + qt(tc,n-2) * se1, col="red")
lines(xVals, yVals - qt(tc,n-2) * se1, col="red")
lines(xVals, yVals + qt(tc,n-2) * se2, col="blue")
lines(xVals, yVals - qt(tc,n-2) * se2, col="blue")
if( !is.null(vx) ){
ret <- NULL
yVals <- beta0 + beta1 * vx
se2 <- sigma * sqrt(1 + 1 / n + (vx - mean(x))^2 / ssx)
for(i in 1:length(vx)){
ret <- c(ret, yVals[i],
yVals[i] - qt(tc,n-2) * se2[i],
yVals[i] + qt(tc,n-2) * se2[i])
}
return(matrix(ret, ncol=3, byrow = TRUE,
dimnames=list(c(),c("esperado","Icmin","ICmax"))))
}
}
lmIC(eleicoes2014$Receitas.em.2014, eleicoes2014$Receitas)
View(eleicoes2014)
eleicoes2014$Receitas.em.2014
View(eleicoes2014)
eleicoes2014 <- read.csv('Eleicoes2014.csv')
eleicoes2014 <- read.csv('Eleicoes2014.csv', sep=";")
? freq_terms
? VCorpus
# pacotes
if(!require(tm)) { install.packages('tm') }
? VCorpus
? unnest_tokens
if(!require(tidyverse)) { install.packages('tidyverse') }
if(!require(tidytext)) { install.packages('tidytext') }
if(!require(tidyr)) { install.packages('tidyr') }
if(!require(dplyr)) { install.packages('dplyr') }
? unnest_tokens
? bigram
getwd()
readRDS?
)
? readRDS
? RDS
? unnest_tokens
library(tm)
? unnest_tokens
library(dplyr)
? unnest_tokens
library(qdap)
? unnest_tokens
? unnest_tokens()
library(tidyverse)
? unnest_tokens()
library(tidytext)
? unnest_tokens()
? VCorpus
setwd("F:/_Pesquisa/PosDoc/_Github/05_2017Dez2018Jan")
qui_quadrado_cont <- function(tbl_cont){
# tbl_cont: tabela de contingência
# dimensões da matriz
d <- dim(tbl_cont)
# graus de liberdade
gl <- (d[1] - 1) * (d[2] - 1)
# soma das colunas
scol <- colSums(tbl_cont)
# soma das linhas
slin <- rowSums(tbl_cont)
# tamanho da amostra
N <- sum(scol) # ou sum(slin)
# matriz de valores esperados
e <- matrix(0, d[1], d[2])
# calculo dos valores esperados
for(i in 1:d[1]){
for(j in 1:d[2]){
e[i, j] <- slin[i] * scol[j] / N
}
}
X2 <- (tbl_cont - e)^2 / e
X2 <- sum(X2)
c(X2, pchisq(X2, gl, lower.tail=FALSE))
}
? matrix
# exemplo do usado no relatório
tb_cont <- matrix(c(25, 45, 15, 25, 10, 30), nrow=3)
tb_cont
# exemplo do usado no relatório
tb_cont <- matrix(c(25, 45, 15, 25, 10, 30), ncow=2)
# exemplo do usado no relatório
tb_cont <- matrix(c(25, 45, 15, 25, 10, 30), ncol=2)
tb_cont
# exemplo do usado no relatório
tb_cont <- matrix(c(25, 45, 15, 25, 10, 30), ncol=2, byrow = TRUE)
tb_cont
qui_quadrado_cont((tb_cont))
